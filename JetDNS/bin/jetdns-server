#!/opt/jetdns/venv/bin/python3
"""
JetDNS Server - Hauptanwendung
Startet DNS-Server und Web-Interface
"""

import argparse
import asyncio
import logging
import multiprocessing
import os
import signal
import sys
import threading
import time
from pathlib import Path

# Pfad für lokale Module
sys.path.insert(0, '/opt/jetdns/src')

from core.dns_server import AdvancedDNSServer
from core.web_interface import JetDNSWebInterface
from management.config_manager import ConfigManager
from analytics.query_analyzer import QueryAnalyzer
from management.threat_intelligence import ThreatIntelligenceManager

# Logging Setup
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('/var/log/jetdns/jetdns.log'),
        logging.StreamHandler()
    ]
)

logger = logging.getLogger('jetdns.main')

class JetDNSApplication:
    """Hauptanwendung für JetDNS Server"""

    def __init__(self, config_path='/etc/jetdns/jetdns.conf'):
        self.config_path = config_path
        self.config_manager = ConfigManager(config_path)

        # Komponenten
        self.dns_server = None
        self.web_interface = None
        self.query_analyzer = QueryAnalyzer()
        self.threat_intel = ThreatIntelligenceManager()

        # Shutdown Handler
        self.shutdown_event = threading.Event()
        self.setup_signal_handlers()

        # Multiprocessing Manager für Statistiken
        self.manager = multiprocessing.Manager()
        self.shared_stats = self.manager.dict()

    def setup_signal_handlers(self):
        """Richtet Signal-Handler für graceful shutdown ein"""
        def signal_handler(signum, frame):
            logger.info(f"Signal {signum} empfangen, starte Shutdown...")
            self.shutdown_event.set()

        signal.signal(signal.SIGTERM, signal_handler)
        signal.signal(signal.SIGINT, signal_handler)
        signal.signal(signal.SIGHUP, self.reload_config)

    def reload_config(self, signum=None, frame=None):
        """Lädt Konfiguration neu"""
        try:
            logger.info("Lade Konfiguration neu...")
            self.config_manager.load_config()

            # DNS Server konfigurieren
            if self.dns_server:
                # Hier könnten spezifische Reloads implementiert werden
                pass

            logger.info("Konfiguration erfolgreich neu geladen")

        except Exception as e:
            logger.error(f"Fehler beim Neuladen der Konfiguration: {e}")

    def validate_setup(self):
        """Validiert Setup und Konfiguration"""
        errors = []

        # Konfiguration validieren
        validation = self.config_manager.validate_config()
        if not validation['valid']:
            errors.extend(validation['errors'])

        # Verzeichnisse prüfen
        required_dirs = [
            '/var/log/jetdns',
            '/var/lib/jetdns',
            '/etc/jetdns',
            '/opt/jetdns'
        ]

        for directory in required_dirs:
            path = Path(directory)
            if not path.exists():
                errors.append(f"Verzeichnis fehlt: {directory}")
            elif not path.is_dir():
                errors.append(f"Kein Verzeichnis: {directory}")

        # Berechtigungen prüfen - root ist in dieser Konfiguration erwünscht
        if os.geteuid() == 0:
            logger.info("JetDNS läuft als root (konfiguriert für diese Installation)")

        # DNS Port prüfen
        dns_port = self.config_manager.get_value('dns', 'listen_port', 53)
        if dns_port < 1024 and os.geteuid() != 0:
            errors.append(f"Privilegierter Port {dns_port} erfordert root-Rechte")

        if errors:
            logger.error("Setup-Validierung fehlgeschlagen:")
            for error in errors:
                logger.error(f"  - {error}")
            return False

        logger.info("Setup-Validierung erfolgreich")
        return True

    def start_dns_server(self):
        """Startet DNS Server"""
        try:
            logger.info("Starte DNS Server...")

            # DNS Server Konfiguration
            config = self.config_manager.get_config()

            self.dns_server = AdvancedDNSServer(
                listen_address=config['dns']['listen_address'],
                listen_port=config['dns']['listen_port'],
                config=config
            )

            # Query Analyzer und Threat Intelligence verknüpfen
            self.dns_server.set_query_analyzer(self.query_analyzer)
            self.dns_server.set_threat_intelligence(self.threat_intel)

            # DNS Server in separatem Thread starten
            def run_dns_server():
                try:
                    asyncio.run(self.dns_server.start())
                except Exception as e:
                    logger.error(f"DNS Server Fehler: {e}")
                    self.shutdown_event.set()

            dns_thread = threading.Thread(target=run_dns_server, daemon=True)
            dns_thread.start()

            # Warten bis DNS Server bereit ist
            timeout = 10
            while timeout > 0 and not self.dns_server.running:
                time.sleep(0.5)
                timeout -= 0.5

            if self.dns_server.running:
                logger.info(f"DNS Server gestartet auf {config['dns']['listen_address']}:{config['dns']['listen_port']}")
                return True
            else:
                logger.error("DNS Server konnte nicht gestartet werden")
                return False

        except Exception as e:
            logger.error(f"Fehler beim Starten des DNS Servers: {e}")
            return False

    def start_web_interface(self):
        """Startet Web Interface"""
        try:
            config = self.config_manager.get_config()

            if not config['web']['enabled']:
                logger.info("Web Interface deaktiviert")
                return True

            logger.info("Starte Web Interface...")

            self.web_interface = JetDNSWebInterface(self.config_path)

            # Web Interface in separatem Thread starten
            def run_web_interface():
                try:
                    self.web_interface.run(
                        host=config['web']['host'],
                        port=config['web']['port'],
                        debug=False
                    )
                except Exception as e:
                    logger.error(f"Web Interface Fehler: {e}")
                    self.shutdown_event.set()

            web_thread = threading.Thread(target=run_web_interface, daemon=True)
            web_thread.start()

            logger.info(f"Web Interface gestartet auf {config['web']['protocol']}://{config['web']['host']}:{config['web']['port']}")
            return True

        except Exception as e:
            logger.error(f"Fehler beim Starten des Web Interface: {e}")
            return False

    def start_background_services(self):
        """Startet Background Services"""
        try:
            logger.info("Starte Background Services...")

            # Threat Intelligence Auto-Update
            if self.config_manager.is_feature_enabled('threat_intelligence'):
                logger.info("Threat Intelligence Service aktiv")

            # Query Analyzer Cleanup
            def cleanup_old_data():
                while not self.shutdown_event.is_set():
                    try:
                        # Täglich um 2:00 Uhr alte Daten bereinigen
                        self.query_analyzer.cleanup_old_data(days_to_keep=30)
                        self.query_analyzer.update_daily_stats()

                        # 24h warten
                        self.shutdown_event.wait(86400)
                    except Exception as e:
                        logger.error(f"Cleanup Service Fehler: {e}")
                        self.shutdown_event.wait(3600)

            cleanup_thread = threading.Thread(target=cleanup_old_data, daemon=True)
            cleanup_thread.start()

            return True

        except Exception as e:
            logger.error(f"Fehler beim Starten der Background Services: {e}")
            return False

    def notify_systemd_ready(self):
        """Benachrichtigt systemd dass Service bereit ist"""
        try:
            import systemd.daemon
            systemd.daemon.notify('READY=1')
            logger.info("Systemd über Service-Bereitschaft benachrichtigt")
        except ImportError:
            # systemd Python-Modul nicht verfügbar
            pass
        except Exception as e:
            logger.warning(f"Systemd-Benachrichtigung fehlgeschlagen: {e}")

    def run(self):
        """Hauptprogramm"""
        logger.info("=" * 50)
        logger.info("JetDNS Server wird gestartet...")
        logger.info("=" * 50)

        # Setup validieren
        if not self.validate_setup():
            logger.error("Setup-Validierung fehlgeschlagen, beende Anwendung")
            return 1

        try:
            # Komponenten starten
            if not self.start_dns_server():
                logger.error("DNS Server konnte nicht gestartet werden")
                return 1

            if not self.start_web_interface():
                logger.error("Web Interface konnte nicht gestartet werden")
                return 1

            if not self.start_background_services():
                logger.warning("Nicht alle Background Services konnten gestartet werden")

            # Systemd benachrichtigen
            self.notify_systemd_ready()

            logger.info("JetDNS Server erfolgreich gestartet")
            logger.info("Drücken Sie Ctrl+C zum Beenden")

            # Watchdog für systemd
            def systemd_watchdog():
                try:
                    import systemd.daemon
                    while not self.shutdown_event.is_set():
                        systemd.daemon.notify('WATCHDOG=1')
                        self.shutdown_event.wait(15)
                except ImportError:
                    pass
                except Exception as e:
                    logger.warning(f"Systemd Watchdog Fehler: {e}")

            watchdog_thread = threading.Thread(target=systemd_watchdog, daemon=True)
            watchdog_thread.start()

            # Hauptschleife
            while not self.shutdown_event.is_set():
                try:
                    self.shutdown_event.wait(1)
                except KeyboardInterrupt:
                    logger.info("Keyboard Interrupt empfangen")
                    break
                except Exception as e:
                    logger.error(f"Hauptschleife Fehler: {e}")
                    break

            # Shutdown
            logger.info("Starte Graceful Shutdown...")

            if self.dns_server:
                self.dns_server.stop()
                logger.info("DNS Server gestoppt")

            logger.info("JetDNS Server beendet")
            return 0

        except Exception as e:
            logger.error(f"Kritischer Fehler: {e}")
            return 1

def main():
    """Hauptfunktion mit Argument-Parsing"""
    parser = argparse.ArgumentParser(description='JetDNS Server')
    parser.add_argument('--config', '-c', 
                       default='/etc/jetdns/jetdns.conf',
                       help='Pfad zur Konfigurationsdatei')
    parser.add_argument('--log-level', 
                       choices=['DEBUG', 'INFO', 'WARNING', 'ERROR'],
                       default='INFO',
                       help='Log Level')
    parser.add_argument('--validate-only', action='store_true',
                       help='Nur Konfiguration validieren')
    parser.add_argument('--version', action='version', version='JetDNS 1.0.0')

    args = parser.parse_args()

    # Log Level setzen
    logging.getLogger().setLevel(getattr(logging, args.log_level))

    # Anwendung erstellen
    app = JetDNSApplication(args.config)

    if args.validate_only:
        # Nur Konfiguration validieren
        if app.validate_setup():
            print("✅ Konfiguration ist gültig")
            return 0
        else:
            print("❌ Konfiguration ist ungültig")
            return 1

    # Normale Ausführung
    return app.run()

if __name__ == '__main__':
    exit_code = main()
    sys.exit(exit_code)
